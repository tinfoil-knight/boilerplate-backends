openapi: 3.0.0
info:
  title: Boilerplate Backend
  version: 1.x
  description: |
    Standard Success Response:
    ```
    {
      "message": "ok"
    }
    ```

    Standard Error Response:
    ```
    {
      "error": <message-here>
    }
    ```

servers:
  - url: http://localhost:3030
    description: Local Server

paths:
  /users:
    post:
      tags: ["users"]
      summary: Create User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: user created
        400:
          description: username already exists

    put:
      tags: ["users"]
      summary: Update User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        200:
          description: user updated

    delete:
      tags: ["users"]
      summary: Delete User
      responses:
        200:
          description: successful operation

  /users/auth:
    post:
      tags: ["users"]
      summary: Get a login token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /profile/{id}:
    get:
      tags: ["users"]
      summary: Get User
      security: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  followers:
                    type: number
                  following:
                    type: number

  /profile/{id}/followers:
    get:
      tags: ["users"]
      summary: Get follower list
      security: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /profile/{id}/following:
    get:
      tags: ["users"]
      summary: Get following list
      security: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /posts:
    post:
      tags: ["posts"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        201:
          description: post created

  /posts/{id}:
    get:
      tags: ["posts"]
      summary: Get Post
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  author:
                    type: string
                  content:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  likes:
                    type: integer
                    minimum: 0

        404:
          description: post not found

    delete:
      tags: ["posts"]
      summary: Delete Post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation

  /posts/{id}/likes:
    post:
      tags: ["posts"]
      summary: Add Like to Post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation

    get:
      tags: ["posts"]
      summary: Get Likes for a Post
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: usernames

    delete:
      tags: ["posts"]
      summary: Remove Like from Post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        username:
          type: string
        followers:
          type: number
        following:
          type: number
        bookmarks:
          type: array
        passwordHash:
          type: string

    Post:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        author:
          type: string
        likes:
          type: number
        createdAt:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
